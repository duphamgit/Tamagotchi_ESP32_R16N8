#include "InputManager.h"

/**
 * @brief Constructor.
 * @param pin GPIO ƒë∆∞·ª£c k·∫øt n·ªëi v·ªõi c·∫£m bi·∫øn TP223.
 */
InputManager::InputManager(int pin) : TOUCH_PIN(pin) {}

/**
 * @brief Kh·ªüi t·∫°o ch√¢n GPIO.
 */
void InputManager::begin() {
    // Thi·∫øt l·∫≠p ch√¢n l√† INPUT (TP223 kh√¥ng c·∫ßn PULLUP)
    pinMode(TOUCH_PIN, INPUT); 
    Serial.printf("InputManager: Touch sensor initialized on GPIO %d\n", TOUCH_PIN);
}

/**
 * @brief Ki·ªÉm tra tr·∫°ng th√°i n√∫t b·∫•m v√† x·ª≠ l√Ω ch·ªëng rung (debounce).
 * @return true n·∫øu n√∫t V·ª™A ƒë∆∞·ª£c nh·∫•n (ch·ªâ 1 l·∫ßn cho m·ªói l·∫ßn nh·∫•n).
 */
bool InputManager::checkButton() {
    // ƒê·ªçc tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa ch√¢n GPIO
    int reading = digitalRead(TOUCH_PIN);
    bool pressedNow = (reading == HIGH); // TP223 tr·∫£ v·ªÅ HIGH (1) khi ch·∫°m
    
    // L∆∞u l·∫°i tr·∫°ng th√°i n√∫t b·∫•m ƒë√£ ƒë∆∞·ª£c l·ªçc tr∆∞·ªõc ƒë√≥
    bool buttonWasPressed = isPressed;

    // --- LOGIC CH·ªêNG RUNG (DEBOUNCING) ƒê√É S·ª¨A ---

    // üåü KH·∫ÆC PH·ª§C: Ch·ªâ reset timer khi t√≠n hi·ªáu RAW thay ƒë·ªïi üåü
    if (reading != lastReading) {
        lastDebounceTime = millis();
    }

    // N·∫øu th·ªùi gian ch·ªëng rung ƒë√£ tr√¥i qua (100ms)
    if ((millis() - lastDebounceTime) > debounceDelay) {
        // N·∫øu tr·∫°ng th√°i ƒë√£ l·ªçc kh√°c v·ªõi tr·∫°ng th√°i th√¥ ·ªïn ƒë·ªãnh
        if (pressedNow != isPressed) {
            isPressed = pressedNow; // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ l·ªçc
        }
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i RAW cu·ªëi c√πng cho l·∫ßn l·∫∑p ti·∫øp theo
    lastReading = reading; 
    
    // --- LOGIC ONE-SHOT ---

    // Tr·∫£ v·ªÅ TRUE ch·ªâ khi n√∫t v·ª´a chuy·ªÉn t·ª´ tr·∫°ng th√°i Released sang Pressed
    if (isPressed && !buttonWasPressed) {
        return true;
    }

    return false;
}