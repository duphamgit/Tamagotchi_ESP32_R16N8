#include "WifiManager.h"
#include <WiFi.h>

// --- CONSTRUCTOR ---
WifiManager::WifiManager(TFT_eSPI& displayRef) : tft(displayRef) {
    apCount = 0;
    scrollIndex = 0;
    selectedIndex = -1; // -1 cho tr·∫°ng th√°i ch∆∞a ch·ªçn
}

void WifiManager::begin() {
    WiFi.mode(WIFI_STA); // ƒê·∫£m b·∫£o ·ªü ch·∫ø ƒë·ªô Station
    Serial.println("WifiManager initialized. WiFi set to STA mode.");
}

// --- H√ÄM V·∫º T·ª™NG M·ª§C M·∫†NG ---
/**
 * @brief V·∫Ω m·ªôt m·ª•c m·∫°ng Wi-Fi (Access Point) t·∫°i v·ªã tr√≠ Y tr√™n m√†n h√¨nh.
 * @param apIndex Index c·ªßa AP trong m·∫£ng aps[] (0 ƒë·∫øn apCount-1).
 * @param screenY T·ªça ƒë·ªô Y tr√™n m√†n h√¨nh ƒë·ªÉ v·∫Ω m·ª•c n√†y.
 * @param isSelected Tr·∫°ng th√°i ch·ªçn (true/false).
 */
void WifiManager::drawAPItem(int apIndex, int screenY, bool isSelected) {
    if (apIndex >= apCount || apIndex < 0) return;

    // Chi·ªÅu r·ªông v√† chi·ªÅu cao ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong WifiManager.h
    int w = DISPLAY_W;
    int h = ITEM_H;

    // M√†u s·∫Øc
    uint16_t bgColor = isSelected ? TFT_DARKGREEN : TFT_BLACK;
    uint16_t textColor = isSelected ? TFT_DARKGREEN : TFT_DARKGREEN;
    
    // X√≥a v√πng v·∫Ω c≈©
    tft.fillRect(0, screenY, w, h, bgColor); 

    // 1. S·ªë th·ª© t·ª± (01.)
    tft.setCursor(5, screenY + 3);
    tft.setTextSize(1);
    tft.setTextColor(TFT_GREEN);
    // S·ª≠ d·ª•ng apIndex + 1 ƒë·ªÉ hi·ªÉn th·ªã s·ªë th·ª© t·ª± t·ª´ 1
    tft.printf("%02d.", apIndex + 1);

    // 2. T√™n SSID
    tft.setCursor(45, screenY + 3);
    // C·∫Øt b·ªõt t√™n SSID n·∫øu qu√° d√†i
    String ssid = aps[apIndex].ssid;
    if (ssid.length() > 18) {
        ssid = ssid.substring(0, 15) + "...";
    }
    tft.print(ssid);

    // 3. C∆∞·ªùng ƒë·ªô s√≥ng (RSSI)
    tft.setTextSize(1);
    tft.setTextColor(TFT_GREEN);
    tft.setCursor(w - 45, screenY + 3);
    tft.printf("%d dBm", aps[apIndex].rssi);

    // 4. M√£ h√≥a 
    tft.setCursor(w - 45, screenY + 12);
    
    // Thay th·∫ø b·∫±ng m·ªôt gi·∫£ ƒë·ªãnh ƒë∆°n gi·∫£n d·ª±a tr√™n t√™n:
    if (aps[apIndex].rssi < -80) {
        tft.print("Weak");
    } else if (aps[apIndex].rssi > -50) {
        tft.print("Strong");
    } else {
        tft.print("Normal");
    }

    // V·∫Ω ƒë∆∞·ªùng chia n·∫øu kh√¥ng ph·∫£i l√† m·ª•c cu·ªëi c√πng c·ªßa m√†n h√¨nh
    if (screenY + h < END_Y) {
        tft.drawFastHLine(0, screenY + h - 1, w, TFT_DARKGREY);
    }
}


// --- H√ÄM V·∫º KHUNG TI√äU ƒê·ªÄ ---
void WifiManager::drawHeader() {
    tft.fillRect(0, 0, DISPLAY_W, HEADER_H, TFT_BLACK);
    
    // CƒÉn gi·ªØa ti√™u ƒë·ªÅ
    tft.setTextSize(2);
    tft.setTextColor(TFT_GREEN, TFT_BLACK);
    
    tft.setTextDatum(MC_DATUM); 
    tft.drawString("WIFI SCANNER", DISPLAY_W / 2, HEADER_H / 2);

    // Thi·∫øt l·∫≠p l·∫°i ƒëi·ªÉm neo v·ªÅ g√≥c tr√™n b√™n tr√°i
    tft.setTextDatum(TL_DATUM); 
}

// --- H√ÄM V·∫º KHUNG CH√ÇN TRANG ---
void WifiManager::drawFooter() {
    tft.fillRect(0, END_Y, DISPLAY_W, FOOTER_H, TFT_BLACK);
    tft.setCursor(17, END_Y + 3);
    tft.setTextSize(1);
    tft.setTextColor(TFT_GREEN, TFT_GREEN);
    
    // Hi·ªÉn th·ªã th√¥ng tin t·ªïng quan
    int maxScroll = apCount > MAX_AP_DISPLAY ? apCount - MAX_AP_DISPLAY : 0;
    tft.printf("Total: %d | Scroll: %d/%d | Sel: %d", apCount, scrollIndex, maxScroll, selectedIndex + 1);
}

// --- H√ÄM V·∫º TO√ÄN B·ªò DANH S√ÅCH AP ---
void WifiManager::drawAPList() {
    // X√≥a v√πng danh s√°ch (C·∫¶N thi·∫øt khi c√≥ SCROLL ho·∫∑c l·∫ßn ƒë·∫ßu v·∫Ω)
    tft.fillRect(0, START_Y, DISPLAY_W, END_Y - START_Y, TFT_BLACK);

    if (apCount <= 0) {
        tft.setCursor(5, START_Y + 10);
        tft.setTextSize(1);
        tft.setTextColor(TFT_RED);
        tft.print("No Networks Found!");
        return;
    }

    // V√≤ng l·∫∑p ch·ªâ v·∫Ω c√°c m·ª•c hi·ªÉn th·ªã ƒë∆∞·ª£c tr√™n m√†n h√¨nh
    int visibleCount = min(apCount - scrollIndex, (int)MAX_AP_DISPLAY);

    for (int i = 0; i < visibleCount; i++) {
        // apIndex: Index th·ª±c t·∫ø trong m·∫£ng aps[]
        int apIndex = scrollIndex + i; 
        // screenY: T·ªça ƒë·ªô Y tr√™n m√†n h√¨nh
        int screenY = START_Y + (i * ITEM_H); 
        
        // V·∫Ω m·ª•c
        drawAPItem(apIndex, screenY, (apIndex == selectedIndex));
    }
}

// --- H√ÄM V·∫º TO√ÄN B·ªò M√ÄN H√åNH (KH√îNG QU√âT) ---
void WifiManager::drawScreen() {
    tft.fillScreen(TFT_BLACK);
    drawHeader();
    drawAPList(); // V·∫Ω danh s√°ch hi·ªán t·∫°i (c√≥ th·ªÉ r·ªóng)
    drawFooter();
}


// --- H√ÄM TH·ª∞C HI·ªÜN QU√âT M·∫†NG ---
void WifiManager::scanNetworks() {
    // Hi·ªÉn th·ªã tr·∫°ng th√°i qu√©t
    tft.fillRect(0, START_Y, DISPLAY_W, END_Y - START_Y, TFT_BLACK);
    tft.setCursor(10, START_Y + 50);
    tft.setTextSize(2);
    tft.setTextColor(TFT_ORANGE);
    tft.print("Scanning Networks...");
    
    // Th·ª±c hi·ªán qu√©t v√† l·∫•y s·ªë l∆∞·ª£ng m·∫°ng
    int newApCount = WiFi.scanNetworks(false, true); // (async=false, show_hidden=true)

    // C·∫≠p nh·∫≠t l·∫°i th√¥ng tin
    apCount = 0;
    scrollIndex = 0;
    selectedIndex = -1;

    if (newApCount > 0) {
        for (int i = 0; i < newApCount && i < 60; i++) {
            aps[i] = {
                WiFi.SSID(i),
                WiFi.RSSI(i),
                WiFi.channel(i)
            };
            apCount++;
        }
        selectedIndex = 0; // Ch·ªçn m·ª•c ƒë·∫ßu ti√™n n·∫øu c√≥ m·∫°ng
    }

    // V·∫Ω l·∫°i to√†n b·ªô m√†n h√¨nh v·ªõi danh s√°ch m·ªõi
    drawScreen();
    
    Serial.printf("Scan completed. Found %d networks.\n", apCount);
}

// --- H√ÄM X·ª¨ L√ù INPUT (CU·ªòN) ---
void WifiManager::handleInput(ButtonIndex pressedIndex) {
    if (apCount <= 0) return;

    int oldSelectedIndex = selectedIndex;
    int oldScrollIndex = scrollIndex;
    bool needsUpdate = false;

    // 1. C·∫≠p nh·∫≠t selectedIndex
    if (pressedIndex == BTN_UP) {
        selectedIndex = max(0, selectedIndex - 1);
        needsUpdate = true;
    } else if (pressedIndex == BTN_DOWN) {
        selectedIndex = min(apCount - 1, selectedIndex + 1);
        needsUpdate = true;
    }

    if (needsUpdate) {
        // 2. C·∫≠p nh·∫≠t scrollIndex ƒë·ªÉ m·ª•c ƒë∆∞·ª£c ch·ªçn n·∫±m trong khung nh√¨n
        
        // N·∫øu m·ª•c ƒë∆∞·ª£c ch·ªçn n·∫±m ngo√†i gi·ªõi h·∫°n d∆∞·ªõi c√πng c·ªßa khung nh√¨n (c·∫ßn cu·ªôn xu·ªëng)
        if (selectedIndex >= scrollIndex + MAX_AP_DISPLAY) {
            scrollIndex = selectedIndex - MAX_AP_DISPLAY + 1;
        } 
        // N·∫øu m·ª•c ƒë∆∞·ª£c ch·ªçn n·∫±m ngo√†i gi·ªõi h·∫°n tr√™n c√πng c·ªßa khung nh√¨n (c·∫ßn cu·ªôn l√™n)
        else if (selectedIndex < scrollIndex) {
            scrollIndex = selectedIndex;
        }

        // ƒê·∫£m b·∫£o scrollIndex kh√¥ng v∆∞·ª£t qu√° gi·ªõi h·∫°n tr√™n c√πng (0)
        scrollIndex = max(0, scrollIndex);

        // 3. N·∫øu c√≥ thay ƒë·ªïi, v·∫Ω l·∫°i danh s√°ch
        if (oldSelectedIndex != selectedIndex || oldScrollIndex != scrollIndex) {
            
            // üåü LOGIC KH·∫ÆC PH·ª§C FLICKER üåü
            if (oldScrollIndex == scrollIndex) {
                // Tr∆∞·ªùng h·ª£p 1: KH√îNG cu·ªôn trang (ch·ªâ thay ƒë·ªïi highlight)
                // Ta ch·ªâ c·∫ßn v·∫Ω l·∫°i hai m·ª•c thay v√¨ to√†n b·ªô 12 m·ª•c
                
                // V·ªã tr√≠ tr√™n m√†n h√¨nh c·ªßa m·ª•c c≈© v√† m·ª•c m·ªõi
                int oldScreenIndex = oldSelectedIndex - scrollIndex;
                int newScreenIndex = selectedIndex - scrollIndex;
                
                // Redraw m·ª•c c≈© (x√≥a highlight)
                drawAPItem(oldSelectedIndex, START_Y + (oldScreenIndex * ITEM_H), false);
                
                // Redraw m·ª•c m·ªõi (th√™m highlight)
                drawAPItem(selectedIndex, START_Y + (newScreenIndex * ITEM_H), true);
                
                drawFooter(); // V·∫´n c·∫ßn c·∫≠p nh·∫≠t footer (ch·ªâ thay ƒë·ªïi s·ªë Sel:)
            } else {
                // Tr∆∞·ªùng h·ª£p 2: C√≥ CU·ªòN trang (scrollIndex thay ƒë·ªïi)
                // C·∫ßn redraw to√†n b·ªô danh s√°ch hi·ªÉn th·ªã
                drawAPList();
                drawFooter();
            }
        }
    }
}
void WifiManager::drawInputPasswordScreen() {
    tft.fillScreen(TFT_BLACK);
    tft.setCursor(10, 100);
    tft.setTextSize(2); 
    tft.printf("Input Wi-Fi passwords page."); 
}

void WifiManager::drawConnectingScreen() {
    tft.fillScreen(TFT_BLACK);
    tft.setCursor(10, 100);
    tft.setTextSize(2); 
    tft.setTextColor(TFT_YELLOW);
    tft.printf("Connecting to Wi-Fi...");
}
