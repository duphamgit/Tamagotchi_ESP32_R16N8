#include <Arduino.h> 
#include <TFT_eSPI.h> 
#include "SystemMonitor.h" 
#include "InputManager.h"  
#include "ButtonManager.h" 
#include "LEDManager.h" 
#include "MenuManager.h" 

// --- KHAI B√ÅO C√ÅC H·∫∞NG S·ªê HI·ªÇN TH·ªä TO√ÄN C·ª§C ---
const int MSG_X = 5;
const int MSG_Y = 165; 
const int MSG_WIDTH = 230; 
const int MSG_HEIGHT = 20; 

// --- KHAI B√ÅO TH√îNG S·ªê PH·∫¶N C·ª®NG TO√ÄN C·ª§C ---
const int TOUCH_BUTTON_PIN = 13; 

// --- KHAI B√ÅO ENUM CHO TR·∫†NG TH√ÅI HI·ªÇN TH·ªä ---
enum DisplayState {
    STATE_MENU,       
    STATE_MONITOR,    // M√†n h√¨nh System Monitor
};

// --- KHAI B√ÅO C√ÅC ƒê·ªêI T∆Ø·ª¢NG TO√ÄN C·ª§C (GLOBAL OBJECTS) ---
TFT_eSPI tft = TFT_eSPI(); 
SystemMonitor monitor(tft);
InputManager touchButton(TOUCH_BUTTON_PIN); 
ButtonManager physicalButtons;              
LEDManager ledControl;
MenuManager menuManager(tft); 

// --- BI·∫æN TR·∫†NG TH√ÅI TO√ÄN C·ª§C ---
DisplayState currentState = STATE_MENU; // B·∫Øt ƒë·∫ßu ·ªü trang Menu

// ‚ùå ƒê√É LO·∫†I B·ªé LOGIC H·∫∏N GI·ªú C·∫¨P NH·∫¨T (lastMonitorUpdateTime v√† monitorUpdateInterval) ‚ùå

// üåü LOGIC ONE-SHOT B·∫∞NG H√ÄM TR·ª¢ GI√öP üåü
bool physicalButtonLastState[BTN_COUNT] = {false, false, false, false}; 

bool checkPhysicalButtonOneShot(ButtonIndex buttonIndex) {
    int index = (int)buttonIndex;
    if (index < 0 || index >= BTN_COUNT) return false; 

    bool currentState = physicalButtons.isPressed(buttonIndex);
    
    // So s√°nh: V·ª´a nh·∫•n = ƒêang nh·∫•n V√Ä L·∫ßn tr∆∞·ªõc KH√îNG nh·∫•n
    bool justPressed = (currentState == true && physicalButtonLastState[index] == false);
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i c≈© cho l·∫ßn l·∫∑p ti·∫øp theo
    physicalButtonLastState[index] = currentState; 
    
    return justPressed;
}

// --- SETUP ---
void setup() {
    Serial.begin(115200);
    delay(1000); 
    
    touchButton.begin();
    physicalButtons.begin(); 
    
    // 1. Kh·ªüi t·∫°o m√†n h√¨nh
    tft.init();
    tft.setRotation(0); 
    
    // 2. V·∫Ω Menu l·∫ßn ƒë·∫ßu ti√™n
    menuManager.drawMenu(); 
    
    ledControl.begin(); 
}

// --- LOOP (Ng∆∞·ªùi ƒêi·ªÅu Ph·ªëi) ---
void loop() {
    // 1. C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI N√öT V√Ä TOUCH
    physicalButtons.update(); 
    touchButton.checkButton(); 
    
    // 2. X·ª¨ L√ù N√öT MENU (CHUY·ªÇN TRANG)
    if (checkPhysicalButtonOneShot(BTN_MENU)) {
        if (currentState == STATE_MENU) {
            // üåü CH·ªà C·∫¨P NH·∫¨T 1 L·∫¶N KHI CHUY·ªÇN TRANG üåü
            currentState = STATE_MONITOR;
            tft.fillScreen(TFT_BLACK); // X√≥a m√†n h√¨nh khi chuy·ªÉn trang
            
            // üåü V·∫º TI√äU ƒê·ªÄ MONITOR üåü
            tft.setTextSize(2); 
            tft.setTextColor(TFT_YELLOW, TFT_BLACK);
            tft.setCursor(10, 5); 
            tft.println("SYSTEM MONITOR");
            
            monitor.displayMemoryStatus(); // V·∫Ω d·ªØ li·ªáu h·ªá th·ªëng L·∫¶N DUY NH·∫§T
            Serial.println("State Changed: MENU -> MONITOR (One-time update)");
        } else if (currentState == STATE_MONITOR) {
            // ƒêang ·ªü MONITOR -> Chuy·ªÉn v·ªÅ MENU
            currentState = STATE_MENU;
            menuManager.drawMenu(); // V·∫Ω l·∫°i Menu
            Serial.println("State Changed: MONITOR -> MENU");
        }
    }

    // 3. X·ª¨ L√ù LOGIC D·ª∞A TR√äN TR·∫†NG TH√ÅI HI·ªÜN T·∫†I
    
    if (currentState == STATE_MENU) {
        // --- X·ª≠ l√Ω ƒëi·ªÅu h∆∞·ªõng UP/DOWN ---
        if (checkPhysicalButtonOneShot(BTN_UP)) { 
            menuManager.handleInput(BTN_UP);
        } else if (checkPhysicalButtonOneShot(BTN_DOWN)) { 
            menuManager.handleInput(BTN_DOWN);
        } 
        
        // --- X·ª≠ l√Ω N√öT CH·ªåN (SELECT) ---
        if (checkPhysicalButtonOneShot(BTN_SELECT)) { 
            int selectedID = menuManager.getSelectedItem();
            const char* selectedLabel = menuManager.getItemLabel(selectedID); 
            
            Serial.printf("ACTION: Selected Item (ID %d): %s\n", selectedID, selectedLabel);
            
            // --- HI·ªÇN TH·ªä H√ÄNH ƒê·ªòNG CH·ªåN ---
            tft.fillRect(MSG_X, MSG_Y, MSG_WIDTH, MSG_HEIGHT, TFT_BLACK); 
            tft.setCursor(MSG_X, MSG_Y); 
            tft.setTextSize(2);
            tft.setTextColor(TFT_GREEN, TFT_BLACK);
            tft.printf("SELECTED: %s", selectedLabel); 

            delay(1000); 
            menuManager.drawMenu(); 
        } 
    } 
    // ‚ùå KH√îNG C√ì ELSE IF (currentState == STATE_MONITOR) N·ªÆA ‚ùå
    
    // 4. CH·∫†Y C√ÅC CH·ª®C NƒÇNG N·ªÄN V√Ä HI·ªÜU ·ª®NG
    delay(10); 
    ledControl.runGreenFade(); 
}