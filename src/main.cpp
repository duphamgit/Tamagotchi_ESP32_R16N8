#include <Arduino.h> 
#include <TFT_eSPI.h> 
#include "SystemMonitor.h" 
#include "InputManager.h"  
#include "ButtonManager.h" 
#include "LEDManager.h" 
#include "MenuManager.h" 
#include "WifiManager.h" 


// --- KHAI B√ÅO C√ÅC H·∫∞NG S·ªê HI·ªÇN TH·ªä TO√ÄN C·ª§C ---
const int MSG_X = 5;
const int MSG_Y = 165; 
const int MSG_WIDTH = 230; 
const int MSG_HEIGHT = 20; 

// --- KHAI B√ÅO TH√îNG S·ªê PH·∫¶N C·ª®NG TO√ÄN C·ª§C ---
const int TOUCH_BUTTON_PIN = 13; 

// --- KHAI B√ÅO ENUM CHO TR·∫†NG TH√ÅI HI·ªÇN TH·ªä ---
enum DisplayState {
    STATE_MENU,       // Tr·∫°ng th√°i hi·ªán t·∫°i: ƒêang ·ªü Menu ch√≠nh
    STATE_MONITOR,    // M√†n h√¨nh System Monitor (s·ª≠ d·ª•ng t·∫°m cho m·ª•c MISC)
    STATE_WIFI        // Tr·∫°ng th√°i cho m√†n h√¨nh c·∫•u h√¨nh WIFI
};

// --- KHAI B√ÅO C√ÅC ƒê·ªêI T∆Ø·ª¢NG TO√ÄN C·ª§C (GLOBAL OBJECTS) ---
TFT_eSPI tft = TFT_eSPI(); 
// SystemMonitor c·∫ßn ƒë∆∞·ª£c gi·∫£ ƒë·ªãnh t·ªìn t·∫°i, n·∫øu kh√¥ng c·∫ßn ph·∫£i comment/x√≥a
// SystemMonitor monitor(tft); 
InputManager touchButton(TOUCH_BUTTON_PIN); 
ButtonManager physicalButtons;              
LEDManager ledControl;
MenuManager menuManager(tft); 
WifiManager wifiManager(tft);

// --- BI·∫æN TR·∫†NG TH√ÅI TO√ÄN C·ª§C ---
DisplayState currentState = STATE_MENU; 

// üåü LOGIC ONE-SHOT B·∫∞M H√ÄM TR·ª¢ GI√öP üåü
// M·∫£ng l∆∞u tr·ªØ tr·∫°ng th√°i nh·∫•n cu·ªëi c√πng (last state) c·ªßa c√°c n√∫t v·∫≠t l√Ω
bool physicalButtonLastState[BTN_COUNT] = {false, false, false, false}; 

/**
 * @brief Ki·ªÉm tra xem m·ªôt n√∫t v·∫≠t l√Ω c√≥ v·ª´a ƒë∆∞·ª£c nh·∫•n trong v√≤ng l·∫∑p n√†y hay kh√¥ng (one-shot logic).
 * @param buttonIndex Index c·ªßa n√∫t (BTN_UP, BTN_DOWN, BTN_SELECT, BTN_MENU).
 * @return true n·∫øu n√∫t v·ª´a ƒë∆∞·ª£c nh·∫•n, false n·∫øu ng∆∞·ª£c l·∫°i.
 */
bool checkPhysicalButtonOneShot(ButtonIndex buttonIndex) {
    int index = (int)buttonIndex;
    if (index < 0 || index >= BTN_COUNT) return false; 

    bool currentState = physicalButtons.isPressed(buttonIndex);
    
    // V·ª´a nh·∫•n = ƒêang nh·∫•n V√Ä L·∫ßn tr∆∞·ªõc KH√îNG nh·∫•n
    bool justPressed = (currentState == true && physicalButtonLastState[index] == false);
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i c≈© cho l·∫ßn l·∫∑p ti·∫øp theo
    physicalButtonLastState[index] = currentState; 
    
    return justPressed;
}


// --- SETUP ---
void setup() {
    Serial.begin(115200);
    delay(1000); 
    
    physicalButtons.begin(); 
    
    // 1. Kh·ªüi t·∫°o m√†n h√¨nh
    tft.init();
    tft.setRotation(0); 
    
    // 2. Kh·ªüi t·∫°o c√°c Manager
    wifiManager.begin(); // Kh·ªüi t·∫°o Wi-Fi v√† scan l·∫ßn ƒë·∫ßu
    menuManager.drawMenu(); // V·∫Ω Menu ch√≠nh ban ƒë·∫ßu
    
    ledControl.begin(); 
}

// --- LOOP (Ng∆∞·ªùi ƒêi·ªÅu Ph·ªëi) ---
void loop() {
    // 1. C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI N√öT V√Ä TOUCH
    physicalButtons.update(); 
    touchButton.checkButton(); 
    
    // 2. X·ª¨ L√ù QUAY L·∫†I MENU B·∫∞NG BTN_MENU (T·ª´ b·∫•t k·ª≥ m√†n h√¨nh con n√†o)
    // N·∫øu KH√îNG ·ªü Menu v√† BTN_MENU ƒë∆∞·ª£c nh·∫•n, chuy·ªÉn v·ªÅ Menu
    if (currentState != STATE_MENU) {
        if (checkPhysicalButtonOneShot(BTN_MENU)) {
            currentState = STATE_MENU;
            menuManager.drawMenu(); 
            Serial.println("State Changed: Sub-Screen -> MENU (via BTN_MENU)");
            return; 
        }
    }
    
    // 3. X·ª¨ L√ù LOGIC D·ª∞A TR√äN TR·∫†NG TH√ÅI HI·ªÜN T·∫†I
    
    if (currentState == STATE_MENU) {
        // --- X·ª≠ l√Ω ƒëi·ªÅu h∆∞·ªõng UP/DOWN (Di chuy·ªÉn trong Menu) ---
         if (checkPhysicalButtonOneShot(BTN_UP)) { 
            // Th·ª≠ g√°n logic ƒëi XU·ªêNG cho n√∫t v·∫≠t l√Ω BTN_UP (ID 0)
            menuManager.handleInput(BTN_UP); 
        } 
        
        if (checkPhysicalButtonOneShot(BTN_DOWN)) { 
            // Th·ª≠ g√°n logic ƒëi L√äN cho n√∫t v·∫≠t l√Ω BTN_DOWN (ID 1)
            menuManager.handleInput(BTN_DOWN); 
        }
        
        // --- X·ª≠ l√Ω N√öT CH·ªåN (BTN_SELECT) ho·∫∑c Touch ---
        if (checkPhysicalButtonOneShot(BTN_SELECT) || touchButton.checkButton()) { 
            // L·∫•y ID m·ª•c ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ chuy·ªÉn tr·∫°ng th√°i
            int selectedID = menuManager.getSelectedItem();
            const char* selectedLabel = menuManager.getItemLabel(selectedID); 
            
            Serial.printf("ACTION: Selected Item (ID %d): %s\n", selectedID, selectedLabel);
            
            // üåü LOGIC CHUY·ªÇN TR·∫†NG TH√ÅI üåü
            if (selectedID == MENU_WIFI) {
                currentState = STATE_WIFI;
                wifiManager.drawScreen(); // V·∫Ω giao di·ªán Wi-Fi
                Serial.println("State Changed: MENU -> WIFI");
            } 
            else if (selectedID == MENU_MISC) { 
                currentState = STATE_MONITOR;
                tft.fillScreen(TFT_BLACK); 
                tft.setTextSize(2); 
                tft.setTextColor(TFT_YELLOW, TFT_BLACK);
                tft.setCursor(10, 5); 
                tft.println("MISCELLANEOUS (TBD)"); 
                // monitor.displayMemoryStatus(); // Uncomment n·∫øu SystemMonitor ƒë∆∞·ª£c s·ª≠ d·ª•ng
                Serial.println("State Changed: MENU -> MONITOR (MISC)");
            }
            // Th√™m logic cho c√°c m·ª•c MenuID kh√°c n·∫øu c·∫ßn...
            
            else {
                // X·ª≠ l√Ω chung cho c√°c m·ª•c Menu ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai
                tft.fillRect(MSG_X, MSG_Y, MSG_WIDTH, MSG_HEIGHT, TFT_BLACK); 
                tft.setCursor(MSG_X, MSG_Y); 
                tft.setTextSize(2);
                tft.setTextColor(TFT_GREEN, TFT_BLACK);
                tft.printf("SELECTED: %s", selectedLabel); 
                delay(1000); 
                menuManager.drawMenu(); // Quay l·∫°i Menu
            }
        } 
    } 
    else if (currentState == STATE_WIFI) {
        // Logic m√†n h√¨nh WIFI
        wifiManager.updateScreen();
        
        // üåü LOGIC QU√âT L·∫†I (BTN_SELECT) üåü
        if (checkPhysicalButtonOneShot(BTN_SELECT)) { 
            Serial.println("WIFI: Re-scanning networks triggered by BTN_SELECT...");
            wifiManager.scanNetworks();
        }
    }
    else if (currentState == STATE_MONITOR) {
        // Logic m√†n h√¨nh MONITOR
        // (Hi·ªán t·∫°i ch·ªâ c·∫ßn ch·ªù BTN_MENU ƒë·ªÉ tho√°t)
    }
    
    // 4. CH·∫†Y C√ÅC CH·ª®C NƒÇNG N·ªÄN V√Ä HI·ªÜU ·ª®NG
    delay(10); 
    ledControl.runGreenFade(); 
}
