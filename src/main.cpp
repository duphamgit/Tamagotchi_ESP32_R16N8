#include <Arduino.h> 
#include <TFT_eSPI.h> 
#include "SystemMonitor.h" 
#include "InputManager.h"  
#include "ButtonManager.h" // Ch·ª©a enum ButtonIndex
#include "LEDManager.h" 
#include "MenuManager.h" 

// --- KHAI B√ÅO C√ÅC H·∫∞NG S·ªê HI·ªÇN TH·ªä TO√ÄN C·ª§C ---
const int MSG_X = 5;
const int MSG_Y = 165; 
const int MSG_WIDTH = 230; 
const int MSG_HEIGHT = 20; 

// --- KHAI B√ÅO TH√îNG S·ªê PH·∫¶N C·ª®NG TO√ÄN C·ª§C ---
const int TOUCH_BUTTON_PIN = 13; 

// --- KHAI B√ÅO ENUM CHO TR·∫†NG TH√ÅI HI·ªÇN TH·ªä ---(Gi·ªØ nguy√™n)
enum DisplayState {
    STATE_MENU,       
    STATE_FEED,
    STATE_PLAY,
    STATE_CLEAN,
    STATE_STATUS      
};

// --- KHAI B√ÅO C√ÅC ƒê·ªêI T∆Ø·ª¢NG TO√ÄN C·ª§C (GLOBAL OBJECTS) ---
TFT_eSPI tft = TFT_eSPI(); 
SystemMonitor monitor(tft);
InputManager touchButton(TOUCH_BUTTON_PIN); // Gi·ªØ l·∫°i cho m·ª•c ƒë√≠ch debug/d√πng Touch cho vi·ªác kh√°c
ButtonManager physicalButtons;              
LEDManager ledControl;
MenuManager menuManager(tft); 

// --- BI·∫æN TR·∫†NG TH√ÅI TO√ÄN C·ª§C ---
DisplayState previousState = STATE_MENU; 

// üåü LOGIC ONE-SHOT B·∫∞NG H√ÄM TR·ª¢ GI√öP üåü
bool physicalButtonLastState[BTN_COUNT] = {false, false, false, false}; // S·ª≠ d·ª•ng BTN_COUNT

bool checkPhysicalButtonOneShot(ButtonIndex buttonIndex) {
    int index = (int)buttonIndex;
    
    if (index < 0 || index >= BTN_COUNT) return false; 

    bool currentState = physicalButtons.isPressed(buttonIndex);
    
    // So s√°nh: V·ª´a nh·∫•n = ƒêang nh·∫•n V√Ä L·∫ßn tr∆∞·ªõc KH√îNG nh·∫•n
    bool justPressed = (currentState == true && physicalButtonLastState[index] == false);
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i c≈© cho l·∫ßn l·∫∑p ti·∫øp theo
    physicalButtonLastState[index] = currentState; 
    
    return justPressed;
}

// --- SETUP ---
void setup() {
    Serial.begin(115200);
    delay(1000); 
    
    touchButton.begin();
    physicalButtons.begin(); 
    
    // 1. Kh·ªüi t·∫°o m√†n h√¨nh
    tft.init();
    tft.setRotation(0); 
    
    // 2. V·∫Ω Menu l·∫ßn ƒë·∫ßu ti√™n
    menuManager.drawMenu(); 
    
    ledControl.begin(); 
}

// --- LOOP (Ng∆∞·ªùi ƒêi·ªÅu Ph·ªëi) ---
void loop() {
    // 1. C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI N√öT V√Ä TOUCH
    physicalButtons.update(); 
    touchButton.checkButton(); 

    // 2. X·ª¨ L√ù INPUT ƒêI·ªÄU H∆Ø·ªöNG (NAVIGATION) - Ch·ªâ d√πng UP v√† DOWN
    
    // BTN_UP: Di chuy·ªÉn L√πi
    if (checkPhysicalButtonOneShot(BTN_UP)) { 
        menuManager.handleInput(BTN_UP);
    } 
    // BTN_DOWN: Di chuy·ªÉn Ti·∫øn
    else if (checkPhysicalButtonOneShot(BTN_DOWN)) { 
        menuManager.handleInput(BTN_DOWN);
    } 
    
    // 3. N√öT CH·ªåN (SELECT/ENTER) - D√πng N√∫t v·∫≠t l√Ω BTN_SELECT
    // üåü ƒê√É S·ª¨A: Thay Touch Button b·∫±ng BTN_SELECT üåü
    if (checkPhysicalButtonOneShot(BTN_SELECT)) { 
        int selectedID = menuManager.getSelectedItem();
        const char* selectedLabel = menuManager.getItemLabel(selectedID); 
        
        Serial.printf("ACTION: Selected Item (ID %d): %s\n", selectedID, selectedLabel);
        
        // --- HI·ªÇN TH·ªä H√ÄNH ƒê·ªòNG CH·ªåN ---
        tft.fillRect(MSG_X, MSG_Y, MSG_WIDTH, MSG_HEIGHT, TFT_BLACK); 
        tft.setCursor(MSG_X, MSG_Y); 
        tft.setTextSize(2);
        tft.setTextColor(TFT_GREEN, TFT_BLACK);
        tft.printf("SELECTED: %s", selectedLabel); 

        // Gi·ªØ th√¥ng b√°o trong th·ªùi gian ng·∫Øn v√† v·∫Ω l·∫°i Menu
        delay(1000); 
        menuManager.drawMenu(); 
    } 
    
    // 4. DEBUG RAW STATE (Gi·ªØ nguy√™n)
    int rawState = digitalRead(TOUCH_BUTTON_PIN);
    
    tft.setTextSize(1);
    tft.setTextColor(TFT_WHITE, TFT_BLACK);
    tft.setCursor(10, 200); 
    tft.printf("RAW State (Pin %d): %d", TOUCH_BUTTON_PIN, rawState);
    
    // 5. Ch·∫°y hi·ªáu ·ª©ng LED
    delay(10); 
    ledControl.runGreenFade(); 
}