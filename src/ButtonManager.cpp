#include "ButtonManager.h"

// D·ªØ li·ªáu c·∫•u h√¨nh: D√πng m·∫£ng pin to√†n c·ª•c
static const int BUTTON_PINS[BTN_COUNT] = {12, 11, 10, 9}; 

ButtonManager::ButtonManager() {
    // Kh·ªüi t·∫°o c√°c ph·∫ßn t·ª≠ trong m·∫£ng
    for (int i = 0; i < NUM_BUTTONS; i++) {
        buttons[i] = PhysicalButton(BUTTON_PINS[i]); 
    }
}

void ButtonManager::begin() {
    Serial.println("ButtonManager: Initializing 4 physical buttons...");
    for (int i = 0; i < NUM_BUTTONS; i++) {
        // S·ª≠ d·ª•ng INPUT_PULLUP, tr·∫°ng th√°i LOW = PRESSED
        pinMode(buttons[i].pin, INPUT_PULLUP); 
        Serial.printf("  - Physical Button on GPIO %d initialized.\n", buttons[i].pin);
    }
}

void ButtonManager::update() {
    for (int i = 0; i < NUM_BUTTONS; i++) {
        PhysicalButton& btn = buttons[i]; 

        int reading = digitalRead(btn.pin);
        
        // üåü KH·∫ÆC PH·ª§C L·ªñI LOGIC: Ch·ªâ reset timer khi t√≠n hi·ªáu RAW thay ƒë·ªïi üåü
        if (reading != btn.lastReading) {
            btn.lastDebounceTime = millis();
        }

        // N·∫øu th·ªùi gian ch·ªëng rung ƒë√£ tr√¥i qua (100ms)
        if ((millis() - btn.lastDebounceTime) > btn.debounceDelay) {
            
            // X√°c ƒë·ªãnh tr·∫°ng th√°i ·ªïn ƒë·ªãnh hi·ªán t·∫°i
            bool stablePressed = (reading == LOW); 

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ l·ªçc (isPressed)
            if (stablePressed != btn.isPressed) {
                btn.isPressed = stablePressed; 
            }
        }
        
        // C·∫¨P NH·∫¨T tr·∫°ng th√°i RAW cu·ªëi c√πng cho l·∫ßn l·∫∑p ti·∫øp theo
        btn.lastReading = reading;
    }
}

bool ButtonManager::isPressed(ButtonIndex index) {
    if (index >= 0 && index < BTN_COUNT) {
        return buttons[index].isPressed; 
    }
    return false;
}