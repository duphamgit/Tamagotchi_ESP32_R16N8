#include "SystemMonitor.h"
#include "esp_heap_caps.h" 
#include "esp_spi_flash.h" 
#include "esp_system.h" 

// ƒê·ªãnh nghƒ©a c√°c h·∫±ng s·ªë m√†u v√† k√≠ch th∆∞·ªõc
#define LINE_HEIGHT 25 // TƒÉng chi·ªÅu cao d√≤ng ƒë·ªÉ c√≥ kho·∫£ng tr·ªëng t·ªët h∆°n
#define DATA_START_Y 35 // V·ªã tr√≠ Y b·∫Øt ƒë·∫ßu v·∫Ω d·ªØ li·ªáu (sau ti√™u ƒë·ªÅ)
#define LINE_CLEAR_WIDTH 235 // Chi·ªÅu r·ªông v√πng x√≥a: g·∫ßn b·∫±ng m√†n h√¨nh

SystemMonitor::SystemMonitor(TFT_eSPI& displayRef) : tft(displayRef) {}

void SystemMonitor::begin() {
    Serial.println("SystemMonitor: Initializing TFT...");
    Serial.println("SystemMonitor: TFT Initialized!");
}

/**
 * @brief Ph∆∞∆°ng th·ª©c n·ªôi b·ªô ƒë·ªÉ v·∫Ω c√°c ch·ªâ s·ªë l√™n m√†n h√¨nh (ch·ªâ v·∫Ω gi√° tr·ªã).
 */
void SystemMonitor::drawStatus(int& y_pos) {
    
    // üåü FIX: Kh√¥ng x√≥a to√†n b·ªô, ch·ªâ x√≥a c·ª•c b·ªô t·ª´ng d√≤ng üåü
    // Thay v√¨ x√≥a v√πng l·ªõn, ta s·∫Ω x√≥a t·ª´ng d√≤ng tr∆∞·ªõc khi v·∫Ω. 
    // y_pos (t·∫°m) s·∫Ω l√† bi·∫øn c·ª•c b·ªô ƒë·ªÉ qu·∫£n l√Ω v·ªã tr√≠ v·∫Ω.
    int current_y = DATA_START_Y;
    
    // 1. KI·ªÇM TRA PSRAM
    size_t psram_total = heap_caps_get_total_size(MALLOC_CAP_SPIRAM);
    size_t psram_free = heap_caps_get_free_size(MALLOC_CAP_SPIRAM);
    
    tft.fillRect(5, current_y, LINE_CLEAR_WIDTH, LINE_HEIGHT, TFT_BLACK); // X√≥a d√≤ng c≈©
    tft.setTextColor(TFT_GREEN);
    tft.setCursor(10, current_y + 5); // C·ªông th√™m 5 ƒë·ªÉ cƒÉn gi·ªØa
    tft.printf("PSRAM: Free: %.2f MB / Total: %.2f MB", (float)psram_free / 1024 / 1024, (float)psram_total / 1024 / 1024);
    current_y += LINE_HEIGHT;

    // 2. KI·ªÇM TRA SRAM
    size_t sram_total = heap_caps_get_total_size(MALLOC_CAP_INTERNAL | MALLOC_CAP_8BIT);
    size_t sram_free = heap_caps_get_free_size(MALLOC_CAP_INTERNAL | MALLOC_CAP_8BIT);
    
    tft.fillRect(5, current_y, LINE_CLEAR_WIDTH, LINE_HEIGHT, TFT_BLACK); // X√≥a d√≤ng c≈©
    tft.setTextColor(TFT_CYAN);
    tft.setCursor(10, current_y + 5);
    tft.printf("SRAM: Free: %.2f KB / Total: %.2f KB", (float)sram_free / 1024, (float)sram_total / 1024);
    current_y += LINE_HEIGHT;
    
    // 3. TH√îNG TIN CHIP FLASH
    uint32_t chip_flash_size = spi_flash_get_chip_size();

    tft.fillRect(5, current_y, LINE_CLEAR_WIDTH, LINE_HEIGHT, TFT_BLACK); // X√≥a d√≤ng c≈©
    tft.setTextColor(TFT_ORANGE);
    tft.setCursor(10, current_y + 5);
    tft.printf("FLASH: Total: %.2f MB", (float)chip_flash_size / 1024 / 1024);
    current_y += LINE_HEIGHT; 
    
    // 4. CHIP REVISION
    tft.fillRect(5, current_y, LINE_CLEAR_WIDTH, LINE_HEIGHT, TFT_BLACK); // X√≥a d√≤ng c≈©
    tft.setTextColor(TFT_MAGENTA);
    tft.setCursor(10, current_y + 5);
    tft.printf("Rev: %d / Model: ESP32-S3", ESP.getChipRevision());
    current_y += LINE_HEIGHT;

    y_pos = current_y; // C·∫≠p nh·∫≠t y_pos (d√π kh√¥ng d√πng)
}


/**
 * @brief Hi·ªÉn th·ªã to√†n b·ªô tr·∫°ng th√°i b·ªô nh·ªõ l√™n m√†n h√¨nh v√† Serial.
 */
void SystemMonitor::displayMemoryStatus() {
    
    tft.setTextSize(1); // K√≠ch th∆∞·ªõc ch·ªØ l·ªõn h∆°n

    // CH·ªà X√ìA V√Ä V·∫º L·∫†I TI√äU ƒê·ªÄ KHI CH∆ØA V·∫º
    // Ch√∫ng ta s·∫Ω ch·ªâ v·∫Ω ti√™u ƒë·ªÅ m·ªôt l·∫ßn khi chuy·ªÉn sang tr·∫°ng th√°i MONITOR (trong main.cpp).
    // ·ªû ƒë√¢y ch·ªâ c·∫ßn g·ªçi drawStatus ƒë·ªÉ v·∫Ω c√°c gi√° tr·ªã.
    
    int y_pos = 0; 
    drawStatus(y_pos); 
}