#include "MenuManager.h"
#include "ButtonManager.h" 

// --- H·∫∞NG S·ªê C·∫§U H√åNH MENU ---
#define MENU_COLUMNS 2
#define MENU_ROWS 2
#define ITEM_WIDTH 120
#define ITEM_HEIGHT 70
#define MARGIN_X 0
#define MARGIN_Y 0

// --- M√ÄU S·∫ÆC ---
#define COLOR_DEFAULT TFT_GREEN
#define COLOR_SELECTED TFT_DARKGREEN
#define COLOR_BACKGROUND TFT_BLACK


MenuManager::MenuManager(TFT_eSPI& displayRef) : tft(displayRef) {}

// --- H√ÄM H·ªñ TR·ª¢: V·∫º T·ª™NG M·ª§C ---
void MenuManager::drawItem(int itemIndex, bool isSelected) {
    // T·ªça ƒë·ªô v√† k√≠ch th∆∞·ªõc chu·∫©n
    int row = itemIndex / MENU_COLUMNS;
    int col = itemIndex % MENU_COLUMNS;
    
    int x = MARGIN_X + col * ITEM_WIDTH;
    int y = MARGIN_Y + row * ITEM_HEIGHT;
    
    uint16_t bgColor = isSelected ? COLOR_SELECTED : COLOR_BACKGROUND;
    uint16_t textColor = isSelected ? COLOR_BACKGROUND : COLOR_DEFAULT;

    // 1. V·∫Ω n·ªÅn v√† khung
    tft.fillRect(x, y, ITEM_WIDTH, ITEM_HEIGHT, bgColor);
    tft.drawRect(x, y, ITEM_WIDTH, ITEM_HEIGHT, COLOR_DEFAULT);

    // 2. V·∫Ω ICON v√† Label
    tft.setTextColor(textColor, bgColor);
    tft.setTextSize(3); 
    tft.setTextDatum(MC_DATUM); 
    tft.drawString(items[itemIndex].icon, x + ITEM_WIDTH/2, y + 25);
    
    tft.setTextSize(2); 
    tft.drawString(items[itemIndex].label, x + ITEM_WIDTH/2, y + ITEM_HEIGHT - 25);
}


// üåü H√ÄM M·ªöI: T·∫†O HI·ªÜU ·ª®NG CHUY·ªÇN ƒê·ªòNG CHO M·ª§C ƒê∆Ø·ª¢C CH·ªåN üåü
void MenuManager::animateSelection(int itemIndex) {
    // 1. L·∫•y t·ªça ƒë·ªô chu·∫©n
    int row = itemIndex / MENU_COLUMNS;
    int col = itemIndex % MENU_COLUMNS;
    int x_base = MARGIN_X + col * ITEM_WIDTH;
    int y_base = MARGIN_Y + row * ITEM_HEIGHT;

    // K√≠ch th∆∞·ªõc hi·ªáu ·ª©ng (Co l·∫°i)
    const int SHRINK_SIZE = 10; 
    
    // M√†u s·∫Øc
    uint16_t bgColor = COLOR_SELECTED; 
    uint16_t textColor = COLOR_BACKGROUND;

    // --- B∆Ø·ªöC 1: CO L·∫†I (Shrink) ---
    int x_shrink = x_base + SHRINK_SIZE / 2;
    int y_shrink = y_base + SHRINK_SIZE / 2;
    int w_shrink = ITEM_WIDTH - SHRINK_SIZE;
    int h_shrink = ITEM_HEIGHT - SHRINK_SIZE;

    // V·∫Ω n·ªÅn co l·∫°i
    tft.fillRect(x_shrink, y_shrink, w_shrink, h_shrink, bgColor);
    tft.drawRect(x_shrink, y_shrink, w_shrink, h_shrink, COLOR_DEFAULT);

    // V·∫Ω ICON v√† Label ·ªü v·ªã tr√≠ co l·∫°i (d√πng t·ªça ƒë·ªô cƒÉn gi·ªØa chu·∫©n)
    tft.setTextColor(textColor, bgColor);
    tft.setTextSize(3); 
    tft.setTextDatum(MC_DATUM); 
    tft.drawString(items[itemIndex].icon, x_base + ITEM_WIDTH/2, y_base + 25);
    tft.setTextSize(2); 
    tft.drawString(items[itemIndex].label, x_base + ITEM_WIDTH/2, y_base + ITEM_HEIGHT - 25);
    
    delay(50); // Gi·ªØ hi·ªáu ·ª©ng trong 50ms

    // --- B∆Ø·ªöC 2: PH√ìNG TO V·ªÄ CHU·∫®N (Stretch/Snap back) ---
    drawItem(itemIndex, true);
}


// --- H√ÄM V·∫º TO√ÄN B·ªò MENU ---
void MenuManager::drawMenu() {
    tft.fillScreen(TFT_BLACK); 
    for (int i = 0; i < MENU_COUNT; i++) {
        drawItem(i, i == selectedItem);
    }
}

// --- H√ÄM X·ª¨ L√ù ƒêI·ªÄU H∆Ø·ªöNG ---
void MenuManager::handleInput(int pressedIndex) {
    int newSelection = selectedItem;

    // Logic ƒëi·ªÅu h∆∞·ªõng 2 n√∫t TU·∫¶N T·ª∞
    switch (pressedIndex) {
        case BTN_DOWN: // Di chuy·ªÉn TI·∫æN
            newSelection = (selectedItem + 1) % MENU_COUNT;
            break;
            
        case BTN_UP: // Di chuy·ªÉn L√ôI
            newSelection = (selectedItem - 1 + MENU_COUNT) % MENU_COUNT;
            break;
            
        default: return; 
    }

    if (newSelection != selectedItem) {
        // 1. V·∫Ω l·∫°i m·ª•c c≈© (b·ªè ch·ªçn)
        drawItem(selectedItem, false); 
        
        selectedItem = newSelection;
        
        // 2. S·ª¨ D·ª§NG H√ÄM ANIMATE M·ªöI
        animateSelection(selectedItem);

        Serial.printf("Menu: Navigated sequentially to: %s (ID: %d)\n", items[selectedItem].label, selectedItem);
    }
}