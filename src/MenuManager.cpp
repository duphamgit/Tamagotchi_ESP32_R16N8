#include "MenuManager.h"
#include "ButtonManager.h" // C·∫ßn ƒë·ªÉ s·ª≠ d·ª•ng enum ButtonIndex

// --- H·∫∞NG S·ªê C·∫§U H√åNH MENU ---
#define MENU_COLUMNS 2
#define MENU_ROWS 2
#define ITEM_WIDTH 120
#define ITEM_HEIGHT 80
#define MARGIN_X 0
#define MARGIN_Y 0

// --- M√ÄU S·∫ÆC (Gi·ªØ nguy√™n) ---
#define COLOR_DEFAULT TFT_WHITE
#define COLOR_SELECTED TFT_GREEN
#define COLOR_BACKGROUND TFT_BLACK


MenuManager::MenuManager(TFT_eSPI& displayRef) : tft(displayRef) {}

// --- H√ÄM H·ªñ TR·ª¢: V·∫º T·ª™NG M·ª§C (Gi·ªØ nguy√™n) ---
void MenuManager::drawItem(int itemIndex, bool isSelected) {
    // 1. T√≠nh to√°n v·ªã tr√≠
    int row = itemIndex / MENU_COLUMNS;
    int col = itemIndex % MENU_COLUMNS;
    
    int x = MARGIN_X + col * ITEM_WIDTH;
    int y = MARGIN_Y + row * ITEM_HEIGHT;
    
    // 2. ƒê·ªãnh h√¨nh m√†u s·∫Øc
    uint16_t bgColor = isSelected ? COLOR_SELECTED : COLOR_BACKGROUND;
    uint16_t textColor = isSelected ? COLOR_BACKGROUND : COLOR_DEFAULT;

    // 3. V·∫Ω n·ªÅn v√† khung
    tft.fillRect(x, y, ITEM_WIDTH, ITEM_HEIGHT, bgColor);
    tft.drawRect(x, y, ITEM_WIDTH, ITEM_HEIGHT, COLOR_DEFAULT);

    // 4. V·∫Ω ICON (Gi·ªØa)
    tft.setTextColor(textColor, bgColor);
    tft.setTextSize(3); 
    tft.setTextDatum(MC_DATUM); 
    tft.drawString(items[itemIndex].icon, x + ITEM_WIDTH/2, y + 25);
    
    // 5. V·∫Ω nh√£n (D∆∞·ªõi)
    tft.setTextSize(2); 
    tft.drawString(items[itemIndex].label, x + ITEM_WIDTH/2, y + ITEM_HEIGHT - 25);
}

// --- H√ÄM V·∫º TO√ÄN B·ªò MENU (Gi·ªØ nguy√™n) ---
void MenuManager::drawMenu() {
    tft.fillScreen(TFT_BLACK); 
    for (int i = 0; i < MENU_COUNT; i++) {
        drawItem(i, i == selectedItem);
    }
}

// --- H√ÄM X·ª¨ L√ù ƒêI·ªÄU H∆Ø·ªöNG (NAVIGATION LOGIC) ---
void MenuManager::handleInput(int pressedIndex) {
    int newSelection = selectedItem;
    // MENU_COUNT = 4

    // üåü ƒê√£ s·ª≠a: Logic ƒëi·ªÅu h∆∞·ªõng 2 n√∫t TU·∫¶N T·ª∞ (Sequential Navigation) üåü
    
    switch (pressedIndex) {
        case BTN_DOWN: // Di chuy·ªÉn TI·∫æN (0 -> 1 -> 2 -> 3 -> 0)
            newSelection = (selectedItem + 1) % MENU_COUNT;
            break;
            
        case BTN_UP: // Di chuy·ªÉn L√ôI (3 -> 2 -> 1 -> 0 -> 3)
            // C√¥ng th·ª©c cho v√≤ng l·∫∑p ng∆∞·ª£c an to√†n
            newSelection = (selectedItem - 1 + MENU_COUNT) % MENU_COUNT;
            break;
            
        default: return; // Ch·ªâ x·ª≠ l√Ω UP/DOWN cho vi·ªác di chuy·ªÉn
    }

    // N·∫øu c√≥ thay ƒë·ªïi, c·∫≠p nh·∫≠t tr·∫°ng th√°i v√† v·∫Ω l·∫°i
    if (newSelection != selectedItem) {
        // V·∫Ω l·∫°i m·ª•c c≈© (b·ªè ch·ªçn)
        drawItem(selectedItem, false); 
        
        selectedItem = newSelection;
        
        // V·∫Ω l·∫°i m·ª•c m·ªõi (ch·ªçn)
        drawItem(selectedItem, true);
        
        Serial.printf("Menu: Navigated sequentially to: %s (ID: %d)\n", items[selectedItem].label, selectedItem);
    }
}